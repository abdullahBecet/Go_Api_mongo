// Code generated by MockGen. DO NOT EDIT.
// Source: ApiGo/Repository (interfaces: TodoRepostory)

// Package repository is a generated GoMock package.
package repository

import (
	models "ApiGo/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTodoRepostory is a mock of TodoRepostory interface.
type MockTodoRepostory struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepostoryMockRecorder
}

// MockTodoRepostoryMockRecorder is the mock recorder for MockTodoRepostory.
type MockTodoRepostoryMockRecorder struct {
	mock *MockTodoRepostory
}

// NewMockTodoRepostory creates a new mock instance.
func NewMockTodoRepostory(ctrl *gomock.Controller) *MockTodoRepostory {
	mock := &MockTodoRepostory{ctrl: ctrl}
	mock.recorder = &MockTodoRepostoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepostory) EXPECT() *MockTodoRepostoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTodoRepostory) Delete(arg0 primitive.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoRepostoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoRepostory)(nil).Delete), arg0)
}

// GetAll mocks base method.
func (m *MockTodoRepostory) GetAll() ([]models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoRepostoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoRepostory)(nil).GetAll))
}

// Insert mocks base method.
func (m *MockTodoRepostory) Insert(arg0 models.Todo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTodoRepostoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTodoRepostory)(nil).Insert), arg0)
}
